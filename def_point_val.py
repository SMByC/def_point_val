# -*- coding: utf-8 -*-
"""
/***************************************************************************
 DefPointValidator
                                 A QGIS plugin
 This pugling takes def point ans validate it using planet month mosiac tiles.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-09-28
        git sha              : $Format:%H$
        copyright            : (C) 2019 by ga.becerra10, hc.torres , my.castro10, rj.santacruz @uniandes.edu.co;   ggalindo@ideam.gov.co
        email                : gusbeca@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .def_point_val_dialog import DefPointValidatorDialog
import os.path

#Added lybraries
from qgis.core import *
from os.path import expanduser
from .core import check_and_install_packages, down_load_tiles, tile_preprocess

class DefPointValidator:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'DefPointValidator_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)
        self.dlg = DefPointValidatorDialog()
        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&DefPointValidator')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('DefPointValidator', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/def_point_val/icon.png'

        self.add_action(
            icon_path,
            text=self.tr(u'DefPoints Validator'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

        # Aqui empeza la programacion del complemento.-----------------------------------

        self.dlg.tb_inVector.clicked.connect(self.openVector)
        self.dlg.tb_outVector.clicked.connect(self.saveVector)
        self.dlg.tb_outRaster.clicked.connect(self.saveRaster)
        self.loadVectors()

    def loadVectors(self):
        """Load vector from qgs"""
        self.dlg.cb_inVector.clear()
        layers = [layer for layer in QgsProject.instance().mapLayers().values()]
        vector_layers = []
        for layer in layers:
            if layer.type() == QgsMapLayer.VectorLayer:
                vector_layers.append(layer.name())
        self.dlg.cb_inVector.addItems(vector_layers)

    def openVector(self):
        """Open vector from file"""
        inFile = str(QFileDialog.getOpenFileName(caption="Open geojsonfile", filter=
        "Geojsonfiles (*.geojson)")[0])
        if inFile is not None:
            self.iface.addVectorLayer(inFile, str.split(os.path.basename(inFile), ".")[0],
                                      "ogr")
            self.loadVectors()

    def saveVector(self):
        """get the file name for points to geojson file"""
        outFile = str(QFileDialog.getSaveFileName(caption="Save points as: ",
                                                  filter="Geojsonfiles (*.geojson)")[0])
        self.setLineVector(outFile)

    def setLineVector(self, text):
        """Ser GUI text for point save file name"""
        self.dlg.le_outVector.setText(text)

    def saveRaster(self):
        """get the file name for points to geojson file"""
        # outFile = str(QFileDialog.getSaveFileName(caption="Save tiles in: ",filter="Directory (*)")[0])
        outFile = str(QFileDialog.getExistingDirectory(None, 'Select a folder:', expanduser("~")))
        self.setLineRaster(outFile)

    def setLineRaster(self, text):
        """Ser GUI text for point save file name"""
        self.dlg.le_outRaster.setText(text)

    def getVectorLayer(self):
        layer = None
        layername = self.dlg.cb_inVector.currentText()
        for lyr in QgsProject.instance().mapLayers().values():
            if lyr.name() == layername:
                layer = lyr
                break
        return layer

    def setVariables(self):
        self.inVector = self.getVectorLayer()
        self.yearB = self.dlg.spin_yearB.value()
        self.yearA = self.dlg.spin_yearA.value()
        self.monthB = self.dlg.spin_monthB.value()
        self.monthA = self.dlg.spin_monthA.value()
        self.outVector = self.dlg.le_outVector.text()
        self.outRaster = self.dlg.le_outRaster.text()
        if self.monthB < 10:
            monthBefore = "0" + str(int(self.monthB))
        else:
            monthBefore = str(int(self.monthB))
        if self.monthA < 10:
            monthAfter = "0" + str(int(self.monthA))
        else:
            monthAfter = str(int(self.monthA))

        self.mosaicNameBefore = "global_monthly_" + str(
            int(self.yearB)) + "_" + monthBefore + "_mosaic"  # "global_monthly_2019_01_mosaic"
        self.mosaicNameAfter = "global_monthly_" + str(int(self.yearA)) + "_" + monthAfter + "_mosaic"

        self.path2model_boscosidad = os.path.join(os.path.dirname(__file__), 'models','modelo_boscosidad_2019-09-19.joblib')
        self.path2model_visibilidad = os.path.join(os.path.dirname(__file__), 'models','modelo_visibilidad_2019-09-19.joblib')

    def buffer(self):
        down_load_tiles.setTiles(self)
        down_load_tiles.getTile(self)
        umbralTamano = 80000
        tile_preprocess.getCoupleVectors(self, umbralTamano)

    # Aqui termina la programacion del complemento-------------------------------------------

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&DefPointValidator'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            #checkpackages = check_and_install_packages.checkPackages()
            #print(checkpackages)
            self.first_start = False
            #self.dlg = DefPointValidatorDialog()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.

            self.setVariables()
            self.buffer()
            pass
